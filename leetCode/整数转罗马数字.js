// 例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。
//
// 通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：
//
// I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。
// X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 
// C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。
// 给定一个整数，将其转为罗马数字。输入确保在 1 到 3999 的范围内
//转换表为：
// 字符     数值     进位
// I       1       个位值为1
// V       5       个位值为5
// X       10      十位值为1
// L       50      十位值为5
// C       100     百位值为1
// D       500     百位值为5
// M       1000    千位值为1
/*
*  由罗马数字表示规则可知
*  一般情况下数字组成:大的数字位+小的数字位
*  可知数值大小 == 大的数字位+小的数字位
*  但当罗马数字进位值(个,十,百,千) == 9 或 == 4时,数字组成变为: 小的数字+大的数字
*  可知: 数值大小 == 大的数字位 - 小的数字位
*   由上述可以推出罗马数字每个进位值1-9的表示法
*  个位[1-9]: I, II, III, IV, V, VI, VII, VIII, IX(对应阿拉伯数字X%10)
*  十位[1-9]: X,XX,XXX,XL,L,LX,LXX,LXXX,XC(对应阿拉伯数字(X%100)/10)
*  百位[1-9]: C,CC,CCC,CD,D,DC,DCC,DCCC,CM（对应阿拉伯数字(X%1000)/100）
*  千位[1-9]: M,MM,MMM(对应阿拉伯数字X/1000)
*  由以上可知一个阿拉伯数组=>罗马数字
*  num => num / 1000 + (num % 1000)/100 + (num % 100)/10 + num%10
 */
let intToRoman = function (num) {
  let Q = ["", "M", "MM", "MMM"];
  let B = ["", "C", "CC", "CCC", "CD", "D", "DC", "DCC", "DCCC", "CM"];
  let S = ["", "X", "XX", "XXX", "XL", "L", "LX", "LXX", "LXXX", "XC"];
  let G = ["", "I", "II", "III", "IV", "V", "VI", "vII", "VIII", "IX"];
  return Q[Math.floor(num / 1000)] + B[Math.floor((num % 100)/100)] + S[Math.floor((num%100)/10)] + G[num%10];
};
